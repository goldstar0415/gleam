syntax = "proto2";
package msg;

// protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/filename.proto
// protoc --go_out=. *.proto
// Install protoc on Mac
//   brew install protobuf
//   go get -u github.com/golang/protobuf/{proto,protoc-gen-go}

///////////////////////////////////
// Network setup
///////////////////////////////////

message ControlMessage {
	optional bool isMemoryIO = 1;
	optional StartRequest startRequest = 2;
	optional StartResponse startResponse = 3;
	optional StopRequest stopRequest = 4;
	optional StopResponse stopResponse = 5;
	optional GetStatusRequest getStatusRequest = 6;
	optional GetStatusResponse getStatusResponse = 7;
	optional DeleteDatasetShardRequest deleteDatasetShardRequest = 8;
	optional DeleteDatasetShardResponse deleteDatasetShardResponse = 9;
	optional LocalStatusReportRequest localStatusReportRequest = 10;
	optional LocalStatusReportResponse localStatusReportResponse = 11;
	optional ReadRequest readRequest = 12;
	optional WriteRequest writeRequest = 13;
}

message NetChan {
	required string server = 1;
	required int32 port = 2;
}

message ComputeResource {
	required int32 cpuCount = 1;
	required int32 cpuLevel = 2;
	required int32 gpuCount = 3;
	required int32 gpuLevel = 4;
	required int32 memory = 5;
}

message StartRequest {
	required InstructionSet instructions = 1;
	repeated string files = 2;
	required string dir = 3;
	required ComputeResource resource = 4;
	required string host = 5;
	required int32 port = 6;
}

///////////////////////////////////
// Distributed Instructions
///////////////////////////////////

message InstructionSet {
	repeated Instruction instructions = 1;
	required int32 readerCount = 2;
	optional uint32 flowHashCode = 3;
	optional bool isProfiling = 4;
}

message Instruction {
	required string name = 1;
	repeated DatasetShardLocation inputShardLocations = 2;
	repeated DatasetShardLocation OutputShardLocations = 3;
	optional int32 memoryInMB = 4;
	optional JoinPartitionedSorted joinPartitionedSorted = 5;
	optional CoGroupPartitionedSorted coGroupPartitionedSorted = 6;
	optional PipeAsArgs pipeAsArgs = 7;
	optional ScatterPartitions scatterPartitions = 8;
	optional CollectPartitions collectPartitions = 9;
	optional InputSplitReader inputSplitReader = 10;
	optional RoundRobin roundRobin = 11;
	optional LocalTop localTop = 12;
	optional Broadcast broadcast = 13;
	optional LocalHashAndJoinWith localHashAndJoinWith = 14;
	optional Script script = 15;
	optional LocalSort localSort = 16;
	optional AdapterSplitReader adapterSplitReader = 17;
	optional MergeSortedTo mergeSortedTo = 18;
}

message ScatterPartitions {
	repeated int32 indexes = 1;
}

message RoundRobin {
}

message CollectPartitions {
}

message LocalSort {
	repeated OrderBy orderBys = 1;
}

message LocalTop {
	required int32 n = 1;
	repeated OrderBy orderBys = 2;
}

message MergeSortedTo {
	repeated OrderBy orderBys = 1;
}

message OrderBy{
	required int32 index = 1;
	required int32 order = 2;
}

message JoinPartitionedSorted {
	repeated int32 indexes = 1;
	required bool isLeftOuterJoin = 2;
	required bool isRightOuterJoin = 3;
}

message CoGroupPartitionedSorted {
	repeated int32 indexes = 1;
}

message PipeAsArgs {
	required string code = 1;
}

message Script {
	required bool isPipe = 1;
	required string path = 2;
	repeated string args = 3;
	repeated string env = 4;
}

message InputSplitReader {
	required string inputType = 1;
}

message AdapterSplitReader {
	required string adapterName = 1;
	required string connectionId = 2;
}

message Broadcast {
}

message LocalHashAndJoinWith {
	repeated int32 indexes = 1;
}

///////////////////////////////////
// Distributed Computing
///////////////////////////////////

message DatasetShard {
	required string FlowName = 1;
	required int32 DatasetId = 2;
	required int32 DatasetShardId = 3;
	optional uint32 FlowHashCode = 4; //uint32 must be optional
}

message DatasetShardLocation {
	required string Name = 1;
	required string Host = 2;
	required int32 Port = 3;
}

message StartResponse {
	required int32 pid = 1;
	optional string error = 2;
	optional NetChan stderr = 3;
	repeated NetChan outputs = 4;
}

message StopRequest {
	required uint32 startRequestHash = 1;
}

message StopResponse {
	required uint32 startRequestHash = 1;
	optional string error = 2;
}

message GetStatusRequest {
	required uint32 startRequestHash = 1;
}

message ChannelStatus {
	required int64 length = 1;
	optional int64 startTime = 2;
	optional int64 stopTime = 3;
	optional string name = 4;
}

message GetStatusResponse {
	required uint32 startRequestHash = 1;
	optional string error = 2;
	repeated ChannelStatus inputStatuses = 3;
	repeated ChannelStatus outputStatuses = 4;
	optional int64 requestTime = 5;
	optional int64 startTime = 6;
	optional int64 stopTime = 7;
}

message DeleteDatasetShardRequest {
	required string name = 1;
}

message DeleteDatasetShardResponse {
	optional string error = 1;
}

message LocalStatusReportRequest {
	required uint32 startRequestHash = 1;
	optional string error = 2;
	repeated ChannelStatus inputStatuses = 3;
	repeated ChannelStatus outputStatuses = 4;
}

message LocalStatusReportResponse {
	optional string error = 1;
}

message WriteRequest {
	required string channelName = 1;
	required string writerName = 2;
	required int32 readerCount = 3;
}

message ReadRequest {
	required string channelName = 1;
	required string readerName = 2;
}
