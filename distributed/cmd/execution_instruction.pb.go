// Code generated by protoc-gen-go.
// source: execution_instruction.proto
// DO NOT EDIT!

package cmd

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InstructionSet struct {
	Instructions     []*Instruction `protobuf:"bytes,1,rep,name=instructions" json:"instructions,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *InstructionSet) Reset()                    { *m = InstructionSet{} }
func (m *InstructionSet) String() string            { return proto.CompactTextString(m) }
func (*InstructionSet) ProtoMessage()               {}
func (*InstructionSet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *InstructionSet) GetInstructions() []*Instruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type Instruction struct {
	ScatterPartitions        *ScatterPartitions        `protobuf:"bytes,1,opt,name=scatterPartitions" json:"scatterPartitions,omitempty"`
	CollectPartitions        *CollectPartitions        `protobuf:"bytes,2,opt,name=collectPartitions" json:"collectPartitions,omitempty"`
	LocalSort                *LocalSort                `protobuf:"bytes,3,opt,name=localSort" json:"localSort,omitempty"`
	MergeSortedTo            *MergeSortedTo            `protobuf:"bytes,4,opt,name=mergeSortedTo" json:"mergeSortedTo,omitempty"`
	JoinPartitionedSorted    *JoinPartitionedSorted    `protobuf:"bytes,5,opt,name=joinPartitionedSorted" json:"joinPartitionedSorted,omitempty"`
	CoGroupPartitionedSorted *CoGroupPartitionedSorted `protobuf:"bytes,6,opt,name=coGroupPartitionedSorted" json:"coGroupPartitionedSorted,omitempty"`
	Script                   *Script                   `protobuf:"bytes,7,opt,name=script" json:"script,omitempty"`
	XXX_unrecognized         []byte                    `json:"-"`
}

func (m *Instruction) Reset()                    { *m = Instruction{} }
func (m *Instruction) String() string            { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()               {}
func (*Instruction) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Instruction) GetScatterPartitions() *ScatterPartitions {
	if m != nil {
		return m.ScatterPartitions
	}
	return nil
}

func (m *Instruction) GetCollectPartitions() *CollectPartitions {
	if m != nil {
		return m.CollectPartitions
	}
	return nil
}

func (m *Instruction) GetLocalSort() *LocalSort {
	if m != nil {
		return m.LocalSort
	}
	return nil
}

func (m *Instruction) GetMergeSortedTo() *MergeSortedTo {
	if m != nil {
		return m.MergeSortedTo
	}
	return nil
}

func (m *Instruction) GetJoinPartitionedSorted() *JoinPartitionedSorted {
	if m != nil {
		return m.JoinPartitionedSorted
	}
	return nil
}

func (m *Instruction) GetCoGroupPartitionedSorted() *CoGroupPartitionedSorted {
	if m != nil {
		return m.CoGroupPartitionedSorted
	}
	return nil
}

func (m *Instruction) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

type ScatterPartitions struct {
	InputShard           *DatasetShard           `protobuf:"bytes,1,req,name=InputShard,json=inputShard" json:"InputShard,omitempty"`
	OutputShardLocations []*DatasetShardLocation `protobuf:"bytes,2,rep,name=OutputShardLocations,json=outputShardLocations" json:"OutputShardLocations,omitempty"`
	ShardCount           *int32                  `protobuf:"varint,3,req,name=shardCount" json:"shardCount,omitempty"`
	XXX_unrecognized     []byte                  `json:"-"`
}

func (m *ScatterPartitions) Reset()                    { *m = ScatterPartitions{} }
func (m *ScatterPartitions) String() string            { return proto.CompactTextString(m) }
func (*ScatterPartitions) ProtoMessage()               {}
func (*ScatterPartitions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ScatterPartitions) GetInputShard() *DatasetShard {
	if m != nil {
		return m.InputShard
	}
	return nil
}

func (m *ScatterPartitions) GetOutputShardLocations() []*DatasetShardLocation {
	if m != nil {
		return m.OutputShardLocations
	}
	return nil
}

func (m *ScatterPartitions) GetShardCount() int32 {
	if m != nil && m.ShardCount != nil {
		return *m.ShardCount
	}
	return 0
}

type CollectPartitions struct {
	InputShardLocations []*DatasetShardLocation `protobuf:"bytes,1,rep,name=inputShardLocations" json:"inputShardLocations,omitempty"`
	OutputShard         *DatasetShard           `protobuf:"bytes,2,req,name=OutputShard,json=outputShard" json:"OutputShard,omitempty"`
	XXX_unrecognized    []byte                  `json:"-"`
}

func (m *CollectPartitions) Reset()                    { *m = CollectPartitions{} }
func (m *CollectPartitions) String() string            { return proto.CompactTextString(m) }
func (*CollectPartitions) ProtoMessage()               {}
func (*CollectPartitions) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CollectPartitions) GetInputShardLocations() []*DatasetShardLocation {
	if m != nil {
		return m.InputShardLocations
	}
	return nil
}

func (m *CollectPartitions) GetOutputShard() *DatasetShard {
	if m != nil {
		return m.OutputShard
	}
	return nil
}

type LocalSort struct {
	InputShard       *DatasetShard `protobuf:"bytes,1,req,name=InputShard,json=inputShard" json:"InputShard,omitempty"`
	OutputShard      *DatasetShard `protobuf:"bytes,2,req,name=OutputShard,json=outputShard" json:"OutputShard,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *LocalSort) Reset()                    { *m = LocalSort{} }
func (m *LocalSort) String() string            { return proto.CompactTextString(m) }
func (*LocalSort) ProtoMessage()               {}
func (*LocalSort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *LocalSort) GetInputShard() *DatasetShard {
	if m != nil {
		return m.InputShard
	}
	return nil
}

func (m *LocalSort) GetOutputShard() *DatasetShard {
	if m != nil {
		return m.OutputShard
	}
	return nil
}

type MergeSortedTo struct {
	InputShardLocations []*DatasetShardLocation `protobuf:"bytes,1,rep,name=inputShardLocations" json:"inputShardLocations,omitempty"`
	OutputShard         *DatasetShard           `protobuf:"bytes,2,req,name=OutputShard,json=outputShard" json:"OutputShard,omitempty"`
	XXX_unrecognized    []byte                  `json:"-"`
}

func (m *MergeSortedTo) Reset()                    { *m = MergeSortedTo{} }
func (m *MergeSortedTo) String() string            { return proto.CompactTextString(m) }
func (*MergeSortedTo) ProtoMessage()               {}
func (*MergeSortedTo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *MergeSortedTo) GetInputShardLocations() []*DatasetShardLocation {
	if m != nil {
		return m.InputShardLocations
	}
	return nil
}

func (m *MergeSortedTo) GetOutputShard() *DatasetShard {
	if m != nil {
		return m.OutputShard
	}
	return nil
}

type JoinPartitionedSorted struct {
	LeftInputShardLocation  *DatasetShardLocation `protobuf:"bytes,1,req,name=leftInputShardLocation" json:"leftInputShardLocation,omitempty"`
	RightInputShardLocation *DatasetShardLocation `protobuf:"bytes,2,req,name=rightInputShardLocation" json:"rightInputShardLocation,omitempty"`
	OutputShard             *DatasetShard         `protobuf:"bytes,3,req,name=OutputShard,json=outputShard" json:"OutputShard,omitempty"`
	IsLeftOuterJoin         *bool                 `protobuf:"varint,4,req,name=isLeftOuterJoin" json:"isLeftOuterJoin,omitempty"`
	IsRightOuterJoin        *bool                 `protobuf:"varint,5,req,name=isRightOuterJoin" json:"isRightOuterJoin,omitempty"`
	XXX_unrecognized        []byte                `json:"-"`
}

func (m *JoinPartitionedSorted) Reset()                    { *m = JoinPartitionedSorted{} }
func (m *JoinPartitionedSorted) String() string            { return proto.CompactTextString(m) }
func (*JoinPartitionedSorted) ProtoMessage()               {}
func (*JoinPartitionedSorted) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *JoinPartitionedSorted) GetLeftInputShardLocation() *DatasetShardLocation {
	if m != nil {
		return m.LeftInputShardLocation
	}
	return nil
}

func (m *JoinPartitionedSorted) GetRightInputShardLocation() *DatasetShardLocation {
	if m != nil {
		return m.RightInputShardLocation
	}
	return nil
}

func (m *JoinPartitionedSorted) GetOutputShard() *DatasetShard {
	if m != nil {
		return m.OutputShard
	}
	return nil
}

func (m *JoinPartitionedSorted) GetIsLeftOuterJoin() bool {
	if m != nil && m.IsLeftOuterJoin != nil {
		return *m.IsLeftOuterJoin
	}
	return false
}

func (m *JoinPartitionedSorted) GetIsRightOuterJoin() bool {
	if m != nil && m.IsRightOuterJoin != nil {
		return *m.IsRightOuterJoin
	}
	return false
}

type CoGroupPartitionedSorted struct {
	LeftInputShardLocation  *DatasetShardLocation `protobuf:"bytes,1,req,name=leftInputShardLocation" json:"leftInputShardLocation,omitempty"`
	RightInputShardLocation *DatasetShardLocation `protobuf:"bytes,2,req,name=rightInputShardLocation" json:"rightInputShardLocation,omitempty"`
	OutputShard             *DatasetShard         `protobuf:"bytes,3,req,name=OutputShard,json=outputShard" json:"OutputShard,omitempty"`
	XXX_unrecognized        []byte                `json:"-"`
}

func (m *CoGroupPartitionedSorted) Reset()                    { *m = CoGroupPartitionedSorted{} }
func (m *CoGroupPartitionedSorted) String() string            { return proto.CompactTextString(m) }
func (*CoGroupPartitionedSorted) ProtoMessage()               {}
func (*CoGroupPartitionedSorted) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *CoGroupPartitionedSorted) GetLeftInputShardLocation() *DatasetShardLocation {
	if m != nil {
		return m.LeftInputShardLocation
	}
	return nil
}

func (m *CoGroupPartitionedSorted) GetRightInputShardLocation() *DatasetShardLocation {
	if m != nil {
		return m.RightInputShardLocation
	}
	return nil
}

func (m *CoGroupPartitionedSorted) GetOutputShard() *DatasetShard {
	if m != nil {
		return m.OutputShard
	}
	return nil
}

type Script struct {
	InputShard       *DatasetShard `protobuf:"bytes,1,req,name=InputShard,json=inputShard" json:"InputShard,omitempty"`
	OutputShard      *DatasetShard `protobuf:"bytes,2,req,name=OutputShard,json=outputShard" json:"OutputShard,omitempty"`
	Name             *string       `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	IsPipe           *bool         `protobuf:"varint,4,req,name=isPipe" json:"isPipe,omitempty"`
	Path             *string       `protobuf:"bytes,5,req,name=path" json:"path,omitempty"`
	Args             []string      `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Script) Reset()                    { *m = Script{} }
func (m *Script) String() string            { return proto.CompactTextString(m) }
func (*Script) ProtoMessage()               {}
func (*Script) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *Script) GetInputShard() *DatasetShard {
	if m != nil {
		return m.InputShard
	}
	return nil
}

func (m *Script) GetOutputShard() *DatasetShard {
	if m != nil {
		return m.OutputShard
	}
	return nil
}

func (m *Script) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Script) GetIsPipe() bool {
	if m != nil && m.IsPipe != nil {
		return *m.IsPipe
	}
	return false
}

func (m *Script) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *Script) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type DatasetShard struct {
	FlowName         *string `protobuf:"bytes,1,req,name=FlowName,json=flowName" json:"FlowName,omitempty"`
	DatasetId        *int32  `protobuf:"varint,2,req,name=DatasetId,json=datasetId" json:"DatasetId,omitempty"`
	DatasetShardId   *int32  `protobuf:"varint,3,req,name=DatasetShardId,json=datasetShardId" json:"DatasetShardId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DatasetShard) Reset()                    { *m = DatasetShard{} }
func (m *DatasetShard) String() string            { return proto.CompactTextString(m) }
func (*DatasetShard) ProtoMessage()               {}
func (*DatasetShard) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *DatasetShard) GetFlowName() string {
	if m != nil && m.FlowName != nil {
		return *m.FlowName
	}
	return ""
}

func (m *DatasetShard) GetDatasetId() int32 {
	if m != nil && m.DatasetId != nil {
		return *m.DatasetId
	}
	return 0
}

func (m *DatasetShard) GetDatasetShardId() int32 {
	if m != nil && m.DatasetShardId != nil {
		return *m.DatasetShardId
	}
	return 0
}

type DatasetShardLocation struct {
	Shard            *DatasetShard `protobuf:"bytes,1,req,name=shard" json:"shard,omitempty"`
	Host             *string       `protobuf:"bytes,2,req,name=Host,json=host" json:"Host,omitempty"`
	Port             *int32        `protobuf:"varint,3,req,name=Port,json=port" json:"Port,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DatasetShardLocation) Reset()                    { *m = DatasetShardLocation{} }
func (m *DatasetShardLocation) String() string            { return proto.CompactTextString(m) }
func (*DatasetShardLocation) ProtoMessage()               {}
func (*DatasetShardLocation) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *DatasetShardLocation) GetShard() *DatasetShard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *DatasetShardLocation) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *DatasetShardLocation) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*InstructionSet)(nil), "cmd.InstructionSet")
	proto.RegisterType((*Instruction)(nil), "cmd.Instruction")
	proto.RegisterType((*ScatterPartitions)(nil), "cmd.ScatterPartitions")
	proto.RegisterType((*CollectPartitions)(nil), "cmd.CollectPartitions")
	proto.RegisterType((*LocalSort)(nil), "cmd.LocalSort")
	proto.RegisterType((*MergeSortedTo)(nil), "cmd.MergeSortedTo")
	proto.RegisterType((*JoinPartitionedSorted)(nil), "cmd.JoinPartitionedSorted")
	proto.RegisterType((*CoGroupPartitionedSorted)(nil), "cmd.CoGroupPartitionedSorted")
	proto.RegisterType((*Script)(nil), "cmd.Script")
	proto.RegisterType((*DatasetShard)(nil), "cmd.DatasetShard")
	proto.RegisterType((*DatasetShardLocation)(nil), "cmd.DatasetShardLocation")
}

func init() { proto.RegisterFile("execution_instruction.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0x9d, 0x1f, 0xea, 0x71, 0x1b, 0x9a, 0xa1, 0x2d, 0xa6, 0xfc, 0x28, 0x32, 0x12, 0x58,
	0x08, 0x55, 0xa2, 0x70, 0xe0, 0xde, 0xaa, 0x10, 0x68, 0x69, 0xd8, 0x70, 0xe1, 0x84, 0x2c, 0x7b,
	0x9b, 0x18, 0x39, 0x5e, 0x6b, 0x77, 0x2d, 0x78, 0x0d, 0x0e, 0x3c, 0x0a, 0x6f, 0xc0, 0x89, 0x2b,
	0x0f, 0xc3, 0x15, 0xed, 0xda, 0x6e, 0x9c, 0xd8, 0x69, 0x51, 0x0f, 0x08, 0x71, 0xdb, 0xfd, 0xe6,
	0xfb, 0xbe, 0x99, 0x9d, 0x59, 0xaf, 0xe1, 0x36, 0xfd, 0x4c, 0x83, 0x4c, 0x46, 0x2c, 0xf9, 0x10,
	0x25, 0x42, 0xf2, 0x2c, 0x50, 0xeb, 0xbd, 0x94, 0x33, 0xc9, 0xb0, 0x15, 0xcc, 0x42, 0xf7, 0x08,
	0x7a, 0xc3, 0x79, 0x64, 0x4c, 0x25, 0x3e, 0x83, 0xf5, 0x0a, 0x57, 0x38, 0xc6, 0xa0, 0xe5, 0xd9,
	0xfb, 0x9b, 0x7b, 0xc1, 0x2c, 0xdc, 0xab, 0x50, 0xc9, 0x02, 0xcb, 0xfd, 0xd9, 0x02, 0xbb, 0x12,
	0xc5, 0x43, 0xe8, 0x8b, 0xc0, 0x97, 0x92, 0xf2, 0x91, 0xcf, 0x65, 0x54, 0x5a, 0x19, 0x9e, 0xbd,
	0xbf, 0xa3, 0xad, 0xc6, 0xcb, 0x51, 0x52, 0x17, 0x28, 0x97, 0x80, 0xc5, 0x31, 0x0d, 0x64, 0xc5,
	0xc5, 0xac, 0xb8, 0x1c, 0x2c, 0x47, 0x49, 0x5d, 0x80, 0x8f, 0xc1, 0x8a, 0x59, 0xe0, 0xc7, 0x63,
	0xc6, 0xa5, 0xd3, 0xd2, 0xea, 0x9e, 0x56, 0x1f, 0x97, 0x28, 0x99, 0x13, 0xf0, 0x39, 0x6c, 0xcc,
	0x28, 0x9f, 0x50, 0xb5, 0xa1, 0xe1, 0x3b, 0xe6, 0xb4, 0xb5, 0x02, 0xb5, 0xe2, 0xa4, 0x1a, 0x21,
	0x8b, 0x44, 0x1c, 0xc1, 0xf6, 0x47, 0x16, 0x25, 0xe7, 0x99, 0x69, 0x98, 0x87, 0x9c, 0x8e, 0x76,
	0xd8, 0xd5, 0x0e, 0xaf, 0x9a, 0x18, 0xa4, 0x59, 0x88, 0xef, 0xc1, 0x09, 0xd8, 0x0b, 0xce, 0xb2,
	0xb4, 0x6e, 0xda, 0xd5, 0xa6, 0x77, 0x8b, 0x36, 0x34, 0x93, 0xc8, 0x4a, 0x39, 0xde, 0x87, 0xae,
	0x08, 0x78, 0x94, 0x4a, 0xe7, 0x9a, 0x36, 0xb2, 0x8b, 0xa9, 0x28, 0x88, 0x14, 0x21, 0xf7, 0x9b,
	0x01, 0xfd, 0xda, 0xa0, 0xf0, 0x09, 0xc0, 0x30, 0x49, 0x33, 0x39, 0x9e, 0xfa, 0x3c, 0x74, 0x8c,
	0x81, 0xe9, 0xd9, 0xfb, 0x7d, 0x2d, 0x3f, 0xf4, 0xa5, 0x2f, 0x68, 0x1e, 0x20, 0x10, 0x9d, 0x93,
	0xf0, 0x04, 0xb6, 0x4e, 0x33, 0x59, 0x6e, 0x55, 0xdf, 0xcb, 0x59, 0xaa, 0xcb, 0x75, 0xab, 0x26,
	0x2e, 0x19, 0x64, 0x8b, 0x35, 0xc8, 0xf0, 0x1e, 0x80, 0x50, 0xc8, 0x01, 0xcb, 0x12, 0x35, 0x52,
	0xd3, 0xeb, 0x90, 0x0a, 0xe2, 0x7e, 0x35, 0xa0, 0x5f, 0xbb, 0x1a, 0xf8, 0x1a, 0x6e, 0xcc, 0x4b,
	0x9a, 0xd7, 0x60, 0x5c, 0x56, 0x43, 0x93, 0x0a, 0x9f, 0x82, 0x5d, 0x39, 0x91, 0x63, 0xae, 0xea,
	0x82, 0x5d, 0x39, 0x80, 0x2b, 0xc0, 0x3a, 0xbf, 0x73, 0x57, 0x69, 0xe3, 0x95, 0x92, 0x7e, 0x31,
	0x60, 0x63, 0xe1, 0xde, 0xfe, 0x03, 0x8d, 0xf8, 0x61, 0xc2, 0x76, 0xe3, 0x97, 0x80, 0x6f, 0x61,
	0x27, 0xa6, 0x67, 0x72, 0x58, 0xcb, 0x54, 0x74, 0xe8, 0x82, 0xf2, 0x56, 0x08, 0x71, 0x0c, 0x37,
	0x79, 0x34, 0x99, 0x36, 0x79, 0x9a, 0x97, 0x79, 0xae, 0x52, 0x2e, 0x1f, 0xbb, 0xf5, 0x27, 0xc7,
	0x46, 0x0f, 0xae, 0x47, 0xe2, 0x98, 0x9e, 0xc9, 0xd3, 0x4c, 0x52, 0xae, 0x1a, 0xe0, 0xb4, 0x07,
	0xa6, 0xb7, 0x46, 0x96, 0x61, 0x7c, 0x04, 0x9b, 0x91, 0x20, 0x2a, 0xf7, 0x9c, 0xda, 0xd1, 0xd4,
	0x1a, 0xee, 0xfe, 0x32, 0xc0, 0x59, 0xf5, 0x02, 0xfc, 0xd7, 0xfd, 0x74, 0xbf, 0x1b, 0xd0, 0xcd,
	0x9f, 0xac, 0xbf, 0xf5, 0x35, 0x21, 0x42, 0x3b, 0xf1, 0x67, 0x54, 0x17, 0x68, 0x11, 0xbd, 0xc6,
	0x1d, 0xe8, 0x46, 0x62, 0x14, 0xa5, 0xb4, 0x98, 0x66, 0xb1, 0x53, 0xdc, 0xd4, 0x97, 0x53, 0x3d,
	0x38, 0x8b, 0xe8, 0xb5, 0xc2, 0x7c, 0x3e, 0x11, 0x4e, 0x77, 0xd0, 0x52, 0x98, 0x5a, 0xbb, 0x29,
	0xac, 0x57, 0x13, 0xe2, 0x2e, 0xac, 0x1d, 0xc5, 0xec, 0xd3, 0x1b, 0x95, 0xc7, 0xd0, 0xda, 0xb5,
	0xb3, 0x62, 0x8f, 0x77, 0xc0, 0x2a, 0xb8, 0xc3, 0xbc, 0xe4, 0x0e, 0xb1, 0xc2, 0x12, 0xc0, 0x07,
	0xd0, 0xab, 0x3a, 0x0d, 0xc3, 0xe2, 0x71, 0xec, 0x85, 0x0b, 0xa8, 0x3b, 0x81, 0xad, 0xa6, 0xf1,
	0xe0, 0x43, 0xe8, 0x88, 0x8b, 0x1b, 0x98, 0xc7, 0xd5, 0x31, 0x5e, 0x32, 0x21, 0x75, 0x05, 0x16,
	0x69, 0x4f, 0x99, 0x90, 0x0a, 0x1b, 0xe5, 0xbf, 0x58, 0x95, 0xb2, 0x9d, 0x32, 0x2e, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x94, 0x20, 0x72, 0x2b, 0x82, 0x08, 0x00, 0x00,
}
