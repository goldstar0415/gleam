syntax = "proto2";
package cmd;

// protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/filename.proto
// protoc --go_out=. *.proto
// Install protoc on Mac
//   brew install protobuf
//   go get -u github.com/golang/protobuf/{proto,protoc-gen-go}

message ControlMessage {
	optional WriteRequest writeRequest = 1;
	optional StartRequest startRequest = 2;
	optional StartResponse startResponse = 3;
	optional StopRequest stopRequest = 4;
	optional StopResponse stopResponse = 5;
	optional GetStatusRequest getStatusRequest = 6;
	optional GetStatusResponse getStatusResponse = 7;
	optional DeleteDatasetShardRequest deleteDatasetShardRequest = 8;
	optional DeleteDatasetShardResponse deleteDatasetShardResponse = 9;
	optional LocalStatusReportRequest localStatusReportRequest = 10;
	optional LocalStatusReportResponse localStatusReportResponse = 11;
	optional ReadRequest readRequest = 12;
}

message NetChan {
	required string server = 1;
	required int32 port = 2;
}

message ComputeResource {
	required int32 cpuCount = 1;
	required int32 cpuLevel = 2;
	required int32 gpuCount = 3;
	required int32 gpuLevel = 4;
	required int32 memory = 5;
}

message StartRequest {
	required InstructionSet instructions = 1;
	repeated string files = 2;
	required string dir = 3;
	required ComputeResource resource = 4;
	required string host = 5;
	required int32 port = 6;
}

message InstructionSet {
	repeated Instruction instructions = 1;
	required int32 readerCount = 2;
	optional uint32 flowHashCode = 3;
}

message Instruction {
	required string name = 1;
	optional Script script = 2;
	optional LocalSort localSort = 3;
	optional MergeSortedTo mergeSortedTo = 4;
	optional JoinPartitionedSorted joinPartitionedSorted = 5;
	optional CoGroupPartitionedSorted coGroupPartitionedSorted = 6;
	optional PipeAsArgs pipeAsArgs = 7;
	optional ScatterPartitions scatterPartitions = 8;
	optional CollectPartitions collectPartitions = 9;
}

message ScatterPartitions {
	required DatasetShardLocation inputShardLocation = 1;
	repeated DatasetShardLocation OutputShardLocations = 2;
	required int32 shardCount = 3;
	repeated int32 indexes = 4;
}

message CollectPartitions {
	repeated DatasetShardLocation inputShardLocations = 1;
	required DatasetShardLocation outputShardLocation = 2;
}

message LocalSort {
	required DatasetShardLocation inputShardLocation = 1;
	required DatasetShardLocation outputShardLocation = 2;
	repeated OrderBy orderBys = 3;
}

message MergeSortedTo {
	repeated DatasetShardLocation inputShardLocations = 1;
	required DatasetShardLocation outputShardLocation = 2;
	repeated OrderBy orderBys = 3;
}

message OrderBy{
	required int32 index = 1;
	required int32 order = 2;
}

message JoinPartitionedSorted {
	required DatasetShardLocation leftInputShardLocation = 1;
	required DatasetShardLocation rightInputShardLocation = 2;
	repeated int32 indexes = 3;
	required bool isLeftOuterJoin = 4;
	required bool isRightOuterJoin = 5;
	required DatasetShardLocation outputShardLocation = 6;
}

message CoGroupPartitionedSorted {
	required DatasetShardLocation leftInputShardLocation = 1;
	required DatasetShardLocation rightInputShardLocation = 2;
	required DatasetShardLocation outputShardLocation = 3;
	repeated int32 indexes = 4;
}

message PipeAsArgs {
	required DatasetShardLocation inputShardLocation = 1;
	required DatasetShardLocation outputShardLocation = 2;
	required string code = 3;
}

message Script {
	required DatasetShardLocation inputShardLocation = 1;
	required DatasetShardLocation outputShardLocation = 2;
	required bool isPipe = 3;
	required string path = 4;
	repeated string args = 5;
	repeated string env = 6;
}

message DatasetShard {
	required string FlowName = 1;
	required int32 DatasetId = 2;
	required int32 DatasetShardId = 3;
	optional uint32 FlowHashCode = 4; //uint32 must be optional
}

message DatasetShardLocation {
	required DatasetShard shard = 1;
	required string Host = 2;
	required int32 Port = 3;
}

message StartResponse {
	required int32 pid = 1;
	optional string error = 2;
	optional NetChan stderr = 3;
	repeated NetChan outputs = 4;
}

message StopRequest {
	required uint32 startRequestHash = 1;
}

message StopResponse {
	required uint32 startRequestHash = 1;
	optional string error = 2;
}

message GetStatusRequest {
	required uint32 startRequestHash = 1;
}

message ChannelStatus {
	required int64 length = 1;
	optional int64 startTime = 2;
	optional int64 stopTime = 3;
	optional string name = 4;
}

message GetStatusResponse {
	required uint32 startRequestHash = 1;
	optional string error = 2;
	repeated ChannelStatus inputStatuses = 3;
	repeated ChannelStatus outputStatuses = 4;
	optional int64 requestTime = 5;
	optional int64 startTime = 6;
	optional int64 stopTime = 7;
}

message DeleteDatasetShardRequest {
	required string name = 1;
}

message DeleteDatasetShardResponse {
	optional string error = 1;
}

message LocalStatusReportRequest {
	required uint32 startRequestHash = 1;
	optional string error = 2;
	repeated ChannelStatus inputStatuses = 3;
	repeated ChannelStatus outputStatuses = 4;
}

message LocalStatusReportResponse {
	optional string error = 1;
}

message WriteRequest {
	required string channelName = 1;
	required string writerName = 2;
	required int32 readerCount = 3;
}

message ReadRequest {
	required string channelName = 1;
	required string readerName = 2;
}
